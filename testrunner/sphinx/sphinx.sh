#!/bin/bash

###
# About:
# Runs Sphinx in nit-picky mode
# Dependencies:
# - Sphinx
###

# This is for later
# https://dev.to/thiht/shell-scripts-matter
#set -euo pipefail
#IFS=$'\n\t'

# Colors
ESC_SEQ="\x1b["
COL_RESET=$ESC_SEQ"39;49;00m"
COL_RED=$ESC_SEQ"31;01m"
COL_GREEN=$ESC_SEQ"32;01m"
COL_YELLOW=$ESC_SEQ"33;01m"
#COL_BLUE=$ESC_SEQ"34;01m"
#COL_MAGENTA=$ESC_SEQ"35;01m"
#COL_CYAN=$ESC_SEQ"36;01m"

# Each documentation project is in a directory in the en_us folder.
# To generate docs for a project, Go to a project directory and
# run `make HTML`.

# To test a subset of projects you can pass them in as command line
# arguments to this script.  For example:
# `./run_tests.sh en_us/install_operations` would only run tests on
# the install operations project.

# The directory that this script is located in.
BASE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# FAILED_BUILDS are builds that had either a SPHINX_ERROR
# or a BUILD_ERROR
FAILED_BUILDS=()

# BUILD_ERRORS are errors that resulted in the doc build
# exiting with a non-zero exit status.
BUILD_ERRORS=0

# SPHINX_ERRORS are errors that are reported by Sphinx
# but do not cause the doc build to return a non-zero exit
# status. These are considered a build failure from a CI
# perspective though.
SPHINX_ERRORS=0

# SPHINX_WARNINGS are warning messages generated by Sphinx
# while building the docs.
SPHINX_WARNINGS=0

projects=($@)
if [ ${#projects[@]} -eq 0 ]
then
    projects=(
        "docs/source"
    )
fi

for project in "${projects[@]}"; do
    cd $BASE_DIR/$project || exit
    echo -en "$COL_YELLOW --> Starting build for $PWD $COL_RESET\n"
    project_build_status=0

    # Make sure log dir exists
    err_log_dir=$BASE_DIR/test_root/$project
    err_log_file=$err_log_dir/err.log
    mkdir -p $err_log_dir

    # Generate html docs.
    # -w writes warnings and errors to the specified file in
    #    addition to stderr.
    # -n runs in nit-picky mode.
    # -E Donâ€™t use a saved environment (the structure caching all
    #    cross-references), but rebuild it completely.
    make html SPHINXOPTS="-E -n -w $err_log_file"
    # Comment above and uncomment next line, if you want to hide output in terminal.
    #make html SPHINXOPTS="-E -n -w $err_log_file" &> /dev/null

    if [ $? -gt 0 ]; then
        project_build_status=1
        BUILD_ERRORS=$((BUILD_ERRORS + 1))
    fi

    # Get errors and warnings from the error log
    IFS=$'\n' read -d '' -r -a error_log < $err_log_file

    num_errors=`echo "${error_log[@]}" | grep -o 'ERROR:' | wc -l`
    num_warnings=`echo "${error_log[@]}" | grep -o 'WARNING:' | wc -l`

    echo SPHINX ERRORS: $num_errors
    echo SPHINX WARNINGS: $num_warnings
    echo

    if [ $num_errors -gt 0 ]; then
        project_build_status=1
        SPHINX_ERRORS=$((SPHINX_ERRORS + num_errors))
    fi

    if [ $num_warnings -gt 0 ]; then
        project_build_status=1
        SPHINX_WARNINGS=$((SPHINX_WARNINGS + num_warnings))
    fi

    if [ $project_build_status -gt 0 ]; then
        FAILED_BUILDS+=($project)
    fi
done

# Report and exit with the correct code
echo -en "$COL_YELLOW ********** All builds done ************$COL_RESET\n"
echo -en "$COL_GREEN TOTAL SPHINX ERRORS:$COL_RESET" "$COL_RED$SPHINX_ERRORS$COL_RESET \n"
echo -en "$COL_GREEN TOTAL SPHINX WARNINGS:$COL_RESET" "$COL_RED$SPHINX_WARNINGS$COL_RESET \n"
echo -en "$COL_GREEN OTHER BUILD ERRORS:$COL_RESET" "$COL_RED$BUILD_ERRORS$COL_RESET \n"

EXIT_STATUS=0
if [ ${#FAILED_BUILDS[@]} -gt 0 ]; then
    echo -en "$COL_RED There were problems while building the following projects:$COL_RESET\n"
    for project in "${FAILED_BUILDS[@]}"; do
        echo $project
    done
    EXIT_STATUS=1
else
    echo -en "$COL_YELLOW All builds passed.$COL_RESET\n"
fi

exit $EXIT_STATUS
